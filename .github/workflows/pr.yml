name: PR
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron:  '0 0 * * *' # daily

env:
  STAC_API_URL: ""
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  pre-commit-check:
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Check out repository code
        uses: actions/checkout@v2

      - uses: franzbischoff/replace_envs@v1
        env:
          PROJECT_NAME: 'biomass'
          DATA_BUCKET: 'biomass-earthdata-dashboard'
          STAGE: ${{ steps.extract_branch.outputs.branch }}
          STAC_API_URL: ''
          VECTOR_TILESERVER_URL: 'https://mbtileserver.dev.maap-project.org/services'
          TITILER_SERVER_URL: 'https://titiler.maap-project.org'
        with:
          from_file: 'stack/config.yml.example'
          to_file: 'stack/config.yml'
          commit: 'false'
  

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('package.json') }} # or package-lock.json
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Upgrade pip
        run: sudo python -m pip install -U pip

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install AWS CDK and pip requirements
        run: npm install -g aws-cdk

      - name: Install python packages
        run: pip install -e ".[dev]" -e ".[test]" -e ".[deploy]"

      - name: Run safety dependency vulnerability check
        # ignore some vulnerabilities in twisted and httplib2 that are already installed and can't be uninstalled      
        run: safety check -i 39557 -i 37040 -i 37209 -i 37554 -i 38085 -i 38368 -i 38303 -i 39608

      - name: Run bandit static analysis check
        run: bandit -r dashboard_api

      # - name: Run tests
      #   run: pytest

      - name: Run CDK synth
        run: cdk synth